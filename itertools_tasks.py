#10.8.15

# –§—É–Ω–∫—Ü–∏—è tabulate()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é tabulate(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# func ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# –§—É–Ω–∫—Ü–∏—è tabulate() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# —Ñ—É–Ω–∫—Ü–∏–∏ func —Å–Ω–∞—á–∞–ª–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 1, –∑–∞—Ç–µ–º 2, –∑–∞—Ç–µ–º 3, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

def tabulate(func):
    counter = 1
    while True:
        yield func(counter)
        counter += 1

### examples

from itertools import count

def tabulate(func):
    return map(func, count(1))

from itertools import count

def tabulate(func):
    for i in count(1):
        yield func(i)

# 10.8.16

# –§—É–Ω–∫—Ü–∏—è factorials()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é factorials() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ accumulate(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ n —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è
# —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.


from itertools import accumulate
import operator

def factorials(n):
    yield from accumulate(range(1,n+1),operator.mul)

### examples
def factorials(n):
    yield from accumulate(range(1, n + 1), lambda x, y: x * y)

#10.8.17
# –§—É–Ω–∫—Ü–∏—è alnum_sequence()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é alnum_sequence(), –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
#
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, —Ü–∏–∫–ª–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö
# –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤:

# 1,A,2,B,3,C,..,X,25,Y,26,Z
import string
from itertools import cycle


def alnum_sequence():

    letters = string.ascii_uppercase
    digits = range(1,27)
    all_lst = (elem for t in zip(digits, letters) for elem in t)
    yield from cycle(all_lst)


### examples
def alnum_sequence():
    for item in zip(cycle(range(1, 27)), cycle(ascii_uppercase)):
        yield from item

#10.8.17
# –§—É–Ω–∫—Ü–∏—è roundrobin() üå∂Ô∏è
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é roundrobin(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö
# —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º.
#
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:
# —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ;
# –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º
# –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.


from itertools import zip_longest

def roundrobin(*args):
    s = ''
    for i in  zip_longest(*args, fillvalue=s):
        for j in i:
            if j == s:
                continue
            yield j

### examples


from itertools import cycle

def take(iterable, n):
    for elem, _ in zip(iterable, range(n)):
        yield elem

def roundrobin(*iterables):
    non_empty = len(iterables)
    iterables = cycle(map(iter, iterables))
    while non_empty:
        try:
            for it in iterables:
                yield next(it)
        except StopIteration:
            non_empty -= 1
            iterables = cycle(take(iterables, non_empty))

###
def roundrobin(*args):
    iters = tuple(iter(a) for a in args)
    while True:
        err_counter = 0
        for i in iters:
            try: res = next(i)
            except: err_counter += 1
            else: yield res
        if err_counter == len(iters):
            break
###
from itertools import zip_longest

def roundrobin(*args):
    return (j for i in zip_longest(*args, fillvalue='') for j in i if j != '')

###

def roundrobin(*iterables):
    rez = [iter(i) for i in iterables]
    flag = True
    while flag:
        flag = False
        for it in rez:
            for i in it:
                yield i
                flag = True
                break


# 10.9.12
# –§—É–Ω–∫—Ü–∏—è drop_while_negative()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é drop_while_negative(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –≤—Å–µ —á–∏—Å–ª–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable,
# –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è
# –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

from itertools import dropwhile

def drop_while_negative(iterable):
    return dropwhile(lambda x: x < 0, iterable)


# 10.9.13
# –§—É–Ω–∫—Ü–∏—è drop_this()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é drop_this(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# obj ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable,
# –Ω–∞—á–∏–Ω–∞—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–µ —Ä–∞–≤–Ω–æ–≥–æ obj.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è
# –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

from itertools import dropwhile
def drop_this(iterable, obj):
    return dropwhile(lambda x: x == obj, iterable)
### examples
drop_this = lambda iterable, obj: __import__('itertools').dropwhile(lambda x: x == obj, iterable)
###
from itertools import dropwhile

def drop_this(iterable, obj):
    yield from dropwhile(lambda x: x == obj, iterable)

# 10.9.14
# –§—É–Ω–∫—Ü–∏—è first_true()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é first_true(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# predicate ‚Äî —Ñ—É–Ω–∫—Ü–∏—è-–ø—Ä–µ–¥–∏–∫–∞—Ç; –µ—Å–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ None, —Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ bool()
# –§—É–Ω–∫—Ü–∏—è first_true() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ —Å—á–µ—Ç—É —ç–ª–µ–º–µ–Ω—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è
# predicate –≤–µ—Ä–Ω—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ True. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ñ—É–Ω–∫—Ü–∏—è first_true() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ None.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–µ–¥–∏–∫–∞—Ç ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –∏–ª–∏ False –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ
# –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.


def first_true(iterable, func):
    if not func:
        func = bool
    for i in filter(func, iterable):
        return i


### examples
def first_true(iterable, func):
    return next(filter(func, iterable), None)


# 10.9.15
# –§—É–Ω–∫—Ü–∏—è take()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é take(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø–µ—Ä–≤—ã—Ö n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è
# –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.
from itertools import islice

def take(iterable, n):
    return islice(iterable,n)
#
# from itertools import islice as take

# 10.9.16

# –§—É–Ω–∫—Ü–∏—è take_nth()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é take_nth(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

from itertools import islice
def take_nth(iterable, n):
    it = iter(iterable)
    for i in range(n):
        try:
            a = next(it)
            if i == n-1:
                return a
        except StopIteration:
            return

### examples

from itertools import islice

def take_nth(iterable, n):
    return next(islice(iterable, n-1, None), None)

###
from itertools import islice
def take_nth(iterable, n: int):
    try:
        return next(islice(iterable, n-1, n))
    except:
        return None

###
from itertools import compress
def take_nth(iterable,n):
    return next(compress(iterable,[False]*(n-1)+[True]),None)


#10.9.17

# –§—É–Ω–∫—Ü–∏—è first_largest()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é first_largest(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
# number ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ number.
# –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ ‚àí1.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
# 10,2,14,7,7,18,20 –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –ü–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º, –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∏–º 11, —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ
# 14, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å  2.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

def first_largest(iterable, num):
    for i, el in enumerate(iterable):
        if el > num:
            return i
    return -1


### examples
from itertools import compress, count

first_largest = lambda it, n: next(compress(count(), (i>n for i in it)), -1)

###
#import itertools as it


def first_largest(iterable, number):
    return next(it.dropwhile(lambda x: x[1] <= number, enumerate(iterable)), [-1])[0]


###
from itertools import starmap, pairwise

numbers = [1, 2, 3, 4, 5]

print(*starmap(lambda a, b: a + b, pairwise(numbers)))

#10.10.13
# –§—É–Ω–∫—Ü–∏—è sum_of_digits()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sum_of_digits(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî —Å—É–º–º—É —Ü–∏—Ñ—Ä –≤—Å–µ—Ö —á–∏—Å–µ–ª, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–º –æ–±—ä–µ–∫—Ç–µ iterable.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∞–±–æ—Ä —á–∏—Å–µ–ª
#
# 13,20,41,2,2,5 –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –°—É–º–º–∞ —Ü–∏—Ñ—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞:
#
# 1+3+2+0+4+1+2+2+5=20


from itertools import chain

def sum_of_digits(iterable):
    return sum(map(int,chain.from_iterable(map(str, iterable))))


### examples

from itertools import chain


def sum_of_digits(iterable):
    strings = map(str, iterable)
    all_elements = chain.from_iterable(strings)
    int_digits = map(int, all_elements)
    return sum(int_digits)


#10.10.14

#   –§—É–Ω–∫—Ü–∏—è is_rising()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_rising(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –∏–ª–∏ False
# –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.


#from itertools import pairwise  #python 3.10

def is_rising(iterable):
    new = pairwise(iterable)
    func = lambda x: x[0] < x[1]
    return all(map(func, new))


### examples
# def is_rising(iterable):
#     return all(a < b for a, b in pairwise(iterable))
#
# ###
# from itertools import pairwise, starmap
# def is_rising(iterable):
#     return all(starmap(lambda a, b: a < b, pairwise(iterable)))



# 10.10.15
#
# –§—É–Ω–∫—Ü–∏—è max_pair()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é max_pair(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–≤—É—Ö —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
# 1,8,2,4,3 –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –ò–∑ –¥–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä—ã —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
# 1 –∏ 8,
# 8 –∏ 2,
# 2 –∏ 4,
# 4 –∏ 3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏–º–µ–µ—Ç –≤—Ç–æ—Ä–∞—è –ø–∞—Ä–∞ ‚Äî 10.


def max_pair(iterable):
    new = pairwise(iterable)
    func = lambda x: x[0] + x[1]
    return max(map(func, new))


### examples

def max_pair(iterable):
    return max(map(sum, pairwise(iterable)))

def max_pair(iterable):
    return max(sum(x) for x in pairwise(iterable))


# 10.10.16

# –§—É–Ω–∫—Ü–∏—è ncycles()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ncycles(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# times ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable,
# –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã—Ö times —Ä–∞–∑.

from itertools import tee, chain
def ncycles(iterable, times):
    a = tee(iterable, times)
    return chain.from_iterable(a)

#10.10.17

# –§—É–Ω–∫—Ü–∏—è grouper()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é grouper(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–π —è–≤–ª—è—é—Ç—Å—è
# –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤ –∫–æ—Ä—Ç–µ–∂–∏ –ø–æ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable.
# –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Å–µ–¥–µ–π, —Ç–æ –∏–º–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ None.

from itertools import zip_longest

def grouper(iterable, n):
    args = [iter(iterable)] * n
    return zip_longest(*args)


### examples

from itertools import repeat, zip_longest

def grouper(iterable, n):
    return zip_longest(*repeat(iter(iterable), n))


def grouper(iterable, n):
    it = iter(iterable)
    return ((elem, *(next(it, None) for i in range(n-1))) for elem in it)