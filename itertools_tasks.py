#10.8.15

# –§—É–Ω–∫—Ü–∏—è tabulate()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é tabulate(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# func ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# –§—É–Ω–∫—Ü–∏—è tabulate() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
# —Ñ—É–Ω–∫—Ü–∏–∏ func —Å–Ω–∞—á–∞–ª–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 1, –∑–∞—Ç–µ–º 2, –∑–∞—Ç–µ–º 3, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.

def tabulate(func):
    counter = 1
    while True:
        yield func(counter)
        counter += 1

### examples

from itertools import count

def tabulate(func):
    return map(func, count(1))

from itertools import count

def tabulate(func):
    for i in count(1):
        yield func(i)

# 10.8.16

# –§—É–Ω–∫—Ü–∏—è factorials()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é factorials() —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ accumulate(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ n —á–∏—Å–µ–ª, –∫–∞–∂–¥–æ–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —è–≤–ª—è–µ—Ç—Å—è
# —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–º –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.


from itertools import accumulate
import operator

def factorials(n):
    yield from accumulate(range(1,n+1),operator.mul)

### examples
def factorials(n):
    yield from accumulate(range(1, n + 1), lambda x, y: x * y)

#10.8.17
# –§—É–Ω–∫—Ü–∏—è alnum_sequence()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é alnum_sequence(), –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
#
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, —Ü–∏–∫–ª–∏—á–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –∏ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö
# –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤:

# 1,A,2,B,3,C,..,X,25,Y,26,Z
import string
from itertools import cycle


def alnum_sequence():

    letters = string.ascii_uppercase
    digits = range(1,27)
    all_lst = (elem for t in zip(digits, letters) for elem in t)
    yield from cycle(all_lst)


### examples
def alnum_sequence():
    for item in zip(cycle(range(1, 27)), cycle(ascii_uppercase)):
        yield from item

#10.8.17
# –§—É–Ω–∫—Ü–∏—è roundrobin() üå∂Ô∏è
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é roundrobin(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö
# —è–≤–ª—è–µ—Ç—Å—è –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–º –æ–±—ä–µ–∫—Ç–æ–º.
#
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Å–µ—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:
# —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ;
# –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º
# –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.


from itertools import zip_longest

def roundrobin(*args):
    s = ''
    for i in  zip_longest(*args, fillvalue=s):
        for j in i:
            if j == s:
                continue
            yield j

### examples


from itertools import cycle

def take(iterable, n):
    for elem, _ in zip(iterable, range(n)):
        yield elem

def roundrobin(*iterables):
    non_empty = len(iterables)
    iterables = cycle(map(iter, iterables))
    while non_empty:
        try:
            for it in iterables:
                yield next(it)
        except StopIteration:
            non_empty -= 1
            iterables = cycle(take(iterables, non_empty))

###
def roundrobin(*args):
    iters = tuple(iter(a) for a in args)
    while True:
        err_counter = 0
        for i in iters:
            try: res = next(i)
            except: err_counter += 1
            else: yield res
        if err_counter == len(iters):
            break
###
from itertools import zip_longest

def roundrobin(*args):
    return (j for i in zip_longest(*args, fillvalue='') for j in i if j != '')

###

def roundrobin(*iterables):
    rez = [iter(i) for i in iterables]
    flag = True
    while flag:
        flag = False
        for it in rez:
            for i in it:
                yield i
                flag = True
                break


# 10.9.12
# –§—É–Ω–∫—Ü–∏—è drop_while_negative()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é drop_while_negative(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –≤—Å–µ —á–∏—Å–ª–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable,
# –Ω–∞—á–∏–Ω–∞—è —Å –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è
# –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

from itertools import dropwhile

def drop_while_negative(iterable):
    return dropwhile(lambda x: x < 0, iterable)


# 10.9.13
# –§—É–Ω–∫—Ü–∏—è drop_this()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é drop_this(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# obj ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable,
# –Ω–∞—á–∏–Ω–∞—è —Å —ç–ª–µ–º–µ–Ω—Ç–∞, –Ω–µ —Ä–∞–≤–Ω–æ–≥–æ obj.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è
# –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

from itertools import dropwhile
def drop_this(iterable, obj):
    return dropwhile(lambda x: x == obj, iterable)
### examples
drop_this = lambda iterable, obj: __import__('itertools').dropwhile(lambda x: x == obj, iterable)
###
from itertools import dropwhile

def drop_this(iterable, obj):
    yield from dropwhile(lambda x: x == obj, iterable)

# 10.9.14
# –§—É–Ω–∫—Ü–∏—è first_true()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é first_true(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# predicate ‚Äî —Ñ—É–Ω–∫—Ü–∏—è-–ø—Ä–µ–¥–∏–∫–∞—Ç; –µ—Å–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ None, —Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–∏ bool()
# –§—É–Ω–∫—Ü–∏—è first_true() –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ —Å—á–µ—Ç—É —ç–ª–µ–º–µ–Ω—Ç –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏—è
# predicate –≤–µ—Ä–Ω—É–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–µ True. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç, —Ñ—É–Ω–∫—Ü–∏—è first_true() –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ None.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–µ–¥–∏–∫–∞—Ç ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –∏–ª–∏ False –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ
# –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.


def first_true(iterable, func):
    if not func:
        func = bool
    for i in filter(func, iterable):
        return i


### examples
def first_true(iterable, func):
    return next(filter(func, iterable), None)


# 10.9.15
# –§—É–Ω–∫—Ü–∏—è take()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é take(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø–µ—Ä–≤—ã—Ö n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –≠–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è
# –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.
from itertools import islice

def take(iterable, n):
    return islice(iterable,n)
#
# from itertools import islice as take

# 10.9.16

# –§—É–Ω–∫—Ü–∏—è take_nth()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é take_nth(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

from itertools import islice
def take_nth(iterable, n):
    it = iter(iterable)
    for i in range(n):
        try:
            a = next(it)
            if i == n-1:
                return a
        except StopIteration:
            return

### examples

from itertools import islice

def take_nth(iterable, n):
    return next(islice(iterable, n-1, None), None)

###
from itertools import islice
def take_nth(iterable, n: int):
    try:
        return next(islice(iterable, n-1, n))
    except:
        return None

###
from itertools import compress
def take_nth(iterable,n):
    return next(compress(iterable,[False]*(n-1)+[True]),None)


#10.9.17

# –§—É–Ω–∫—Ü–∏—è first_largest()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é first_largest(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
# number ‚Äî –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ number.
# –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ ‚àí1.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
# 10,2,14,7,7,18,20 –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –ü–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º, –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∏–º 11, —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ
# 14, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å  2.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º.

def first_largest(iterable, num):
    for i, el in enumerate(iterable):
        if el > num:
            return i
    return -1


### examples
from itertools import compress, count

first_largest = lambda it, n: next(compress(count(), (i>n for i in it)), -1)

###
#import itertools as it


def first_largest(iterable, number):
    return next(it.dropwhile(lambda x: x[1] <= number, enumerate(iterable)), [-1])[0]


###
#from itertools import starmap, pairwise

#numbers = [1, 2, 3, 4, 5]

#print(*starmap(lambda a, b: a + b, pairwise(numbers)))

#10.10.13
# –§—É–Ω–∫—Ü–∏—è sum_of_digits()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é sum_of_digits(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî —Å—É–º–º—É —Ü–∏—Ñ—Ä –≤—Å–µ—Ö —á–∏—Å–µ–ª, –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–º –æ–±—ä–µ–∫—Ç–µ iterable.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–∞–±–æ—Ä —á–∏—Å–µ–ª
#
# 13,20,41,2,2,5 –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –°—É–º–º–∞ —Ü–∏—Ñ—Ä –≤—Å–µ—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞:
#
# 1+3+2+0+4+1+2+2+5=20


from itertools import chain

def sum_of_digits(iterable):
    return sum(map(int,chain.from_iterable(map(str, iterable))))


### examples

from itertools import chain


def sum_of_digits(iterable):
    strings = map(str, iterable)
    all_elements = chain.from_iterable(strings)
    int_digits = map(int, all_elements)
    return sum(int_digits)


#10.10.14

#   –§—É–Ω–∫—Ü–∏—è is_rising()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_rising(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Å—Ç—Ä–æ–≥–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, –∏–ª–∏ False
# –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.


#from itertools import pairwise  #python 3.10

def is_rising(iterable):
    new = pairwise(iterable)
    func = lambda x: x[0] < x[1]
    return all(map(func, new))


### examples
# def is_rising(iterable):
#     return all(a < b for a, b in pairwise(iterable))
#
# ###
# from itertools import pairwise, starmap
# def is_rising(iterable):
#     return all(starmap(lambda a, b: a < b, pairwise(iterable)))



# 10.10.15
#
# –§—É–Ω–∫—Ü–∏—è max_pair()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é max_pair(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–≤—É—Ö —Å–æ—Å–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
# 1,8,2,4,3 –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞. –ò–∑ –¥–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä—ã —Å–æ—Å–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
# 1 –∏ 8,
# 8 –∏ 2,
# 2 –∏ 4,
# 4 –∏ 3. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏–º–µ–µ—Ç –≤—Ç–æ—Ä–∞—è –ø–∞—Ä–∞ ‚Äî 10.


def max_pair(iterable):
    new = pairwise(iterable)
    func = lambda x: x[0] + x[1]
    return max(map(func, new))


### examples

def max_pair(iterable):
    return max(map(sum, pairwise(iterable)))

def max_pair(iterable):
    return max(sum(x) for x in pairwise(iterable))


# 10.10.16

# –§—É–Ω–∫—Ü–∏—è ncycles()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ncycles(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# times ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable,
# –∑–∞—Ü–∏–∫–ª–µ–Ω–Ω—ã—Ö times —Ä–∞–∑.

from itertools import tee, chain
def ncycles(iterable, times):
    a = tee(iterable, times)
    return chain.from_iterable(a)

#10.10.17

# –§—É–Ω–∫—Ü–∏—è grouper()
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é grouper(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
#
# iterable ‚Äî –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
# n ‚Äî –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ—Ç–æ—Ä–æ–π —è–≤–ª—è—é—Ç—Å—è
# –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤ –∫–æ—Ä—Ç–µ–∂–∏ –ø–æ n —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Å–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ iterable.
# –ï—Å–ª–∏ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ—Å–µ–¥–µ–π, —Ç–æ –∏–º–∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ None.

from itertools import zip_longest

def grouper(iterable, n):
    args = [iter(iterable)] * n
    return zip_longest(*args)


### examples

from itertools import repeat, zip_longest

def grouper(iterable, n):
    return zip_longest(*repeat(iter(iterable), n))


def grouper(iterable, n):
    it = iter(iterable)
    return ((elem, *(next(it, None) for i in range(n-1))) for elem in it)


#10.11.10
#
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ Person, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ. –ü–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞
# —è–≤–ª—è–µ—Ç—Å—è –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞, –≤—Ç–æ—Ä—ã–º ‚Äî –≤–æ–∑—Ä–∞—Å—Ç, —Ç—Ä–µ—Ç—å–∏–º ‚Äî —Ä–æ—Å—Ç. –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ persons, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç—Ç–∏ –∫–æ—Ä—Ç–µ–∂–∏.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–ª –ª—é–¥–µ–π –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ –∏—Ö —Ä–æ—Å—Ç—É –∏ –≤—ã–≤–µ–ª –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã.
# –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å–Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ä–æ—Å—Ç, –∞ –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –∏–º–µ–Ω–∞ –ª—é–¥–µ–π,
# –∏–º–µ—é—â–∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–æ—Å—Ç. –ì—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ä–æ—Å—Ç–∞, –∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ,
# –∏–º–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö ‚Äî –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
#
# <—Ä–æ—Å—Ç>: <–∏–º—è>, <–∏–º—è>, ...
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ù–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
#
# 158: Ariana, Eva
# 172: Mark
# ...


# from collections import namedtuple
# from itertools import groupby
#
# Person = namedtuple('Person', ['name', 'age', 'height'])
#
# persons = [Person('Tim', 63, 193), Person('Eva', 47, 158),
#            Person('Mark', 71, 172), Person('Alex', 45, 193),
#            Person('Jeff', 63, 193), Person('Ryan', 41, 184),
#            Person('Ariana', 28, 158), Person('Liam', 69, 193)]
#
# result = groupby(sorted(persons, key=lambda x: (x.height, x.name)), key= lambda x: x.height)
#
# for key, values in result:
#     print(f'{key}: {", ".join([i.name for i in values])}')

#10.11.11

# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ Student, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ. –ü–µ—Ä–≤—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞
# —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–º–∏–ª–∏—è —É—á–µ–Ω–∏–∫–∞, –≤—Ç–æ—Ä—ã–º ‚Äî –∏–º—è, —Ç—Ä–µ—Ç—å–∏–º ‚Äî –∫–ª–∞—Å—Å. –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ students, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç—Ç–∏ –∫–æ—Ä—Ç–µ–∂–∏.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ–µ –∏–º—è —Å—Ä–µ–¥–∏ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –∏—Å–∫–æ–º–æ–µ –∏–º—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ.

#
# from collections import namedtuple
# from itertools import groupby
#
# Student = namedtuple('Student', ['surname', 'name', 'grade'])
#
# students = [Student('–ì–∞–≥–∏–µ–≤', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', 10), Student('–î–µ–¥–µ–≥–∫–∞–µ–≤', '–ò–ª—å—è', 11), Student('–ö–æ–¥–∑–∞–µ–≤', '–ì–µ–æ—Ä–≥–∏–π', 10),
#             Student('–ù–∞–±–æ–∫–æ–≤–∞', '–ê–ª–∏—Å–∞', 11), Student('–ö–æ—Ä–∞–µ–≤', '–ê—Ä—Ç—É—Ä', 10), Student('–®–∏–ª–∏–Ω', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', 11),
#             Student('–£—Ä—Ç–∞–µ–≤–∞', '–ò–ª–∏–Ω–∞', 11), Student('–°–∞–ª–±–∏–µ–≤', '–ú–∞–∫—Å–∏–º', 10), Student('–ö–∞–ø—É—Å—Ç–∏–Ω', '–ò–ª—å—è', 11),
#             Student('–ì—É–¥—Ü–µ–≤', '–¢–∞–π–º—É—Ä–∞–∑', 11), Student('–ü–µ—Ä—á–∏–∫–æ–≤', '–ú–∞–∫—Å–∏–º', 10), Student('–ß–µ–Ω', '–ò–ª—å—è', 11),
#             Student('–ï–ª—å–∫–∏–Ω–∞', '–ú–∞—Ä–∏—è', 11),Student('–ú–∞–∫–æ–µ–≤', '–†—É—Å–ª–∞–Ω', 11), Student('–ê–ª–±–µ–≥–æ–≤', '–•–µ—Ç–∞–≥', 11),
#             Student('–©–µ—Ä–±–∞–∫', '–ò–ª—å—è', 10), Student('–ò–¥—Ä–∏—Å–æ–≤', '–ë–∞–≥—Ä–∞—Ç', 11), Student('–ì–∞–ø–±–∞–µ–≤', '–ì–µ—Ä–º–∞–Ω', 10),
#             Student('–¶–∏–≤–∏–Ω—Å–∫–∞—è', '–ê–Ω–Ω–∞', 10), Student('–¢—É—Ç–∫–µ–≤–∏—á', '–Æ—Ä–∏–π', 11), Student('–ú—É—Å–∏–∫–æ–≤', '–ê–Ω–¥—Ä–∞–Ω–∏–∫', 11),
#             Student('–ì–∞–¥–∑–∏–µ–≤', '–ì–µ–æ—Ä–≥–∏–π', 11), Student('–ë–µ–ª–æ–≤', '–Æ—Ä–∏–π', 11), Student('–ê–∫–æ–µ–≤–∞', '–î–∏–∞–Ω–∞', 11),
#             Student('–î–µ–Ω–∏—Å–æ–≤', '–ò–ª—å—è', 11), Student('–ë—É–∫—É–ª–æ–≤–∞', '–î–∏–∞–Ω–∞', 10), Student('–ê–∫–æ–µ–≤–∞', '–õ–µ—Ä–∞', 11)]
#
# names_grouped = groupby(sorted([student.name for student in students]))
# max_result = max(names_grouped, key=lambda tpl: sum(1 for i in tpl[1]))
# print(max_result[0])


### examples
#
# group_iter = groupby(sorted(students, key=lambda x: x.name), key=lambda x: x.name)
# max_result = max(group_iter, key=lambda tpl: sum(1 for i in tpl[1]))
# print(max_result[0])


# students.sort(key=lambda x: x.name)
# data = groupby(students, key=lambda x: x.name)
# print(max(data, key=lambda x: sum(1 for _ in x[1]))[0])


#10.11.12

# –ì—Ä—É–ø–ø—ã —Å–ª–æ–≤
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –ø–æ –∏—Ö –¥–ª–∏–Ω–µ.
#
# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∑–∞–ø–∏—Å–∞–Ω–æ —Å—Ç—Ä–æ—á–Ω—ã–º–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏
# –±—É–∫–≤–∞–º–∏.
#
# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ –∏—Ö –¥–ª–∏–Ω–µ –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã. –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω–∞
# –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–∞ –¥–ª–∏–Ω–∞, –∞ –∑–∞—Ç–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —Å–ª–æ–≤–∞, –∏–º–µ—é—â–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–ª–∏–Ω—É. –ì—Ä—É–ø–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
# —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã, –∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Å–ª–æ–≤–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö ‚Äî –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
# –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: <–¥–ª–∏–Ω–∞> -> <—Å–ª–æ–≤–æ>, <—Å–ª–æ–≤–æ>, ...
#
# from itertools import groupby
# lst = sorted(input().split(), key=lambda x: (len(x), x))
# lst = groupby(lst, key=len)
# for k, v in lst:
#     print(f'{k} -> {", ".join(v)}')
#
# ### examples
# for k, v in groupby(sorted(input().split(), key = len), key = len):
#     print(f'{k} -> {", ".join(sorted(v))}')

#10.11.13
# –ù–µ—Ç –¥–µ–ª
# –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¢–∏–º—É—Ä –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–ª–æ–∫–Ω–æ—Ç –¥–µ–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ö–∞–∂–¥–æ–µ –¥–µ–ª–æ –æ–Ω —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–π.
#
# –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Å–ø–∏—Å–æ–∫ tasks, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∞–Ω—ã –≤—Å–µ –¥–µ–ª–∞ –¢–∏–º—É—Ä–∞. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: –ø–µ—Ä–≤—ã–π ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–ª–∞, –≤—Ç–æ—Ä–æ–π ‚Äî –¥–µ–π—Å—Ç–≤–∏–µ, —Ç—Ä–µ—Ç–∏–π ‚Äî –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å.
#
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –≤—ã–≤–µ–ª –≤—Å–µ –¥–µ–ª–∞ –¢–∏–º—É—Ä–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —É–∫–∞–∑–∞–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
#
# <–¥–µ–ª–æ>:
#     1. <–¥–µ–π—Å—Ç–≤–∏–µ>
#     2. <–¥–µ–π—Å—Ç–≤–∏–µ>
#     ...
# –ú–µ–∂–¥—É –¥–≤—É–º—è –¥–µ–ª–∞–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ù–∞—á–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ (–≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç—Å—Ç—É–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç—ã—Ä–µ –ø—Ä–æ–±–µ–ª–∞):
#
# –ï–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:
#     1. –¥–æ–¥–µ–ª–∞—Ç—å –∫—É—Ä—Å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
#
# –ö—É—Ä—Å –ø–æ –æ–æ–ø:
#     1. –æ–±—Å—É–¥–∏—Ç—å —Ç–µ–º—ã
#     2. –æ–±—Å—É–¥–∏—Ç—å –∑–∞–¥–∞—á–∏
#
# ...
from itertools import groupby

tasks = [('–û—Ç–¥—ã—Ö', '–ø–æ—Å–ø–∞—Ç—å –¥–Ω–µ–º', 3),
        ('–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', '–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –¥–∏—Å–∫–æ—Ä–¥–µ', 1),
        ('–ï–ì–≠ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–¥–æ–¥–µ–ª–∞—Ç—å –∫—É—Ä—Å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', 1),
        ('–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã', '–æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –∫—É—Ä—Å–∞—Ö', 2),
        ('–û—Ç–¥—ã—Ö', '–ø–æ–≥—É–ª—è—Ç—å –≤–µ—á–µ—Ä–æ–º', 4),
        ('–ö—É—Ä—Å –ø–æ –æ–æ–ø', '–æ–±—Å—É–¥–∏—Ç—å —Ç–µ–º—ã', 1),
        ('–£—Ä–æ–∫ –ø–æ groupby', '–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 3),
        ('–£—Ä–æ–∫ –ø–æ groupby', '–Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç', 1),
        ('–û—Ç–¥—ã—Ö', '–ø–æ–≥—É–ª—è—Ç—å –¥–Ω–µ–º', 2),
        ('–£—Ä–æ–∫ –ø–æ groupby', '–¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏', 2),
        ('–£–±–æ—Ä–∫–∞', '—É–±—Ä–∞—Ç—å—Å—è –≤ –≤–∞–Ω–Ω–æ–π', 2),
        ('–£–±–æ—Ä–∫–∞', '—É–±—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ', 1),
        ('–£–±–æ—Ä–∫–∞', '—É–±—Ä–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ö–Ω–µ', 3),
        ('–û—Ç–¥—ã—Ö', '–ø–æ–≥—É–ª—è—Ç—å —É—Ç—Ä–æ–º', 1),
        ('–ö—É—Ä—Å –ø–æ –æ–æ–ø', '–æ–±—Å—É–¥–∏—Ç—å –∑–∞–¥–∞—á–∏', 2)]

sorted_tasks = sorted(tasks, key=lambda x:(x[0],x[2]))
grouped_tasks = groupby(sorted_tasks, key=lambda x: x[0])

for key, task_iter in grouped_tasks:
    print(f'{key}:')
    for task in task_iter:
        print(f'    {task[2]}. {task[1]}')
    print()



#10.11.14

# –§—É–Ω–∫—Ü–∏—è group_anagrams()
# –ê–Ω–∞–≥—Ä–∞–º–º—ã ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –±—É–∫–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:
#
# –∞–¥–∞–ø—Ç–µ—Ä ‚Äî –ø–µ—Ç–∞—Ä–¥–∞
# –∞–¥—Ä–µ—Å–æ—á–µ–∫ ‚Äî —Å–µ—Ä–µ–¥–æ—á–∫–∞
# –∞–∑–±—É–∫–∞ ‚Äî –±–∞–∑—É–∫–∞
# –∞–∏—Å—Ç–µ–Ω–æ–∫ ‚Äî –æ—Å–µ—Ç–∏–Ω–∫–∞
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é group_anagrams(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# words ‚Äî —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ—Ä—Ç–µ–∂–∏ —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ words, —è–≤–ª—è—é—â–∏–µ—Å—è –∞–Ω–∞–≥—Ä–∞–º–º–∞–º–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ—Ä—Ç–µ–∂–µ–π.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü–æ—Ä—è–¥–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–ø–∏—Å–∫–µ, –∞ —Ç–∞–∫–∂–µ –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–∏—Ö –∫–æ—Ä—Ç–µ–∂–∞—Ö, –Ω–µ –≤–∞–∂–µ–Ω.

from itertools import groupby
def group_anagrams(words: list):
    temp = groupby(sorted(words, key=lambda x: sorted(x)),key=lambda x: sorted(x))
    result = []
    for k, v in temp:
        result.append(tuple([*v]))
    return result


### examples

def group_anagrams(words):
    return (tuple(i) for _, i in groupby(sorted(words, key=sorted), key=sorted))



#10.11.15
# –§—É–Ω–∫—Ü–∏—è ranges() üå∂Ô∏è
# –ë—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–µ–ª—ã—Ö –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –æ—Ç—Ä–µ–∑–æ–∫, –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É
# —Å–æ—Å–µ–¥–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —ç—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–≤–Ω–∞ –µ–¥–∏–Ω–∏—Ü–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–∞
# 3,4,5,6,7,8 –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –æ—Ç—Ä–µ–∑–æ–∫
# [3;8]. –ß–∏—Å–ª–∞ 1,3,5,11,15,22 –≤ –æ—Ç—Ä–µ–∑–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è. –û–¥–∏–Ω–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –æ—Ç—Ä–µ–∑–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏ –ø—Ä–∞–≤–æ–π,
# –∏ –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π —è–≤–ª—è–µ—Ç—Å—è –æ–Ω–æ —Å–∞–º–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ
#
# 1 –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –æ—Ç—Ä–µ–∑–æ–∫
# [1;1].
#
# –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é ranges(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç:
#
# numbers ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
# –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ numbers –≤ –æ—Ç—Ä–µ–∑–∫–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è –∏—Ö –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–µ–π, –≥–¥–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
# –∫–æ—Ä—Ç–µ–∂–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–µ–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç—Ä–µ–∑–∫–∞, –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî –ø—Ä–∞–≤–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π –æ—Ç—Ä–µ–∑–∫–∞. –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ—Ä—Ç–µ–∂–∏-–æ—Ç—Ä–µ–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏—è
# –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.
#
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ß–∏—Å–ª–∞ –≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–º —Ñ—É–Ω–∫—Ü–∏–µ–π —Å–ø–∏—Å–∫–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ —Å–≤–æ–µ–º –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

from itertools import groupby


def ranges(lst):
    grouped = groupby(lst, key=lambda x: numbers.index(x) - x)
    result = []

    for k, values in grouped:
        values = list(values)
        result.append((values[0], values[-1]))

    return result








